var express = require('express');
var df = require('dateformat');
var passport = require('passport');
var router = express.Router();
var mysql = require('mysql');
var cfg = require('config');
var sqlhelper = require('mysqlhelper2');
var mailer = require('nodemailer');
var produit;
var messageService;

///ROUTE HP

	///route "/" 
router.get("/index.html", function (req, resp) {
    //si le user enregistré en session est different de nul (avec typeof)
    if (typeof req.user !== 'undefined') {
        //renvoie du twig avec un tableau qui récupère les données de username
        resp.render("admin/index.html.twig", { "username": req.user.username });
    }
    //sinon renvoi à la page login pour authentification
    else {
        resp.redirect("/login.html");
    }
});

	///Route "/index.html" 

router.get("/", function (req, resp) {
    //on crée une route qui recupere tous les liens de "/admin" et redirige sur la route principal de admin
    resp.redirect("/admin/index.html");
});

///ROUTE LOGOUT ADMIN

router.get("/logout.html", function (req, resp) {
    //Arrêt de la session et on redirige vers l'index publique
    req.logout();
    resp.redirect("/");

});

/// ROUTE ADMINISTRATION DES MESSAGES

	/// Route "/form"

router.get("/form.html", function (req, resp) {
    //on initialise la variable message à null
    var message = null;
    //on selectionne tous les elements de la table contact_form
    sqlhelper.pool.query("SELECT * FROM contact_form", function (err, rows, fields) {
        //console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        if (err != null) {
            //on enregistre le message d'erreur'
            //message = "Il y a eu une erreur dans la query";
            //on log pour voir le mesage si il passe
            //console.log(message + ' ----- ' + err);
        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            //message = "La recuperation des données c'est bien passé ";
            //on log pour voir le mesage si il passe
            //console.log('message bien reussi avec le message : ' + message);
        }
        //on log pour voir le mesage si il passe en fin de connection
        //console.log('connection end ' + message);
        //fin de connection    

        //si le user enregistré en session est different de nul (donc loggé)
        if (typeof req.user !== 'undefined') {

            //alors je renvoie le twig avec un tablo qui recupere les elements de username et le tablo des mail a afficher
            resp.render("admin/contact_form.html.twig", { "form_email": rows });
        }
        //sinon je renvoie le user a la page login pour authentification
        else {
            resp.redirect("/login.html");
        }
    });
});
/////////////////////////////////////////////////////////////////////////////////
//////////////////Route modif envoi form statu admin////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

/// ROUTE ENVOI FORMULAIRES ADMIN

	/// Route "/formenvoi/:id" ////////////////////////////////////////////////

router.get("/formenvoi/:id", function (req, resp) {
    var id = req.params.id;

  //on fait une mise a jours de la table contact_form avec la nouvelle valeur (1) pour emailnotification
   sqlhelper.pool.query("UPDATE contact_form SET emailnotification = 1 WHERE contact_form.id = ?;  ",
    //securisation des données envoyer en bdd 
    [id],
    //function qui renvoie une erreur si il y a un probleme
    function (err, rows, fields) {
      //console.log("err :" + err);
      if (err != null) {
       // message = "Il y a eu une erreur votre message n'a pas était envoyé";
        //console.log(message + ' ----- ' + err);
      }
      else {
        //message = "Votre message à bien été envoyer, merci ";
        //console.log('message bien reussi avec le message : ' + message);
      }
      //console.log('connection end ' + message);
      //console.log(' message hors de la fonction : ' + message);
      resp.writeHead(200);
        resp.end();
    });  
});
/////////////////////////////////////////////////////////////////////////////////
//////////////////Route Admin affiche tous les produits////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

///////////////////////route "/produits.html" ////////////////////////////////////////////////

router.get("/produits.html", function (req, resp) {
    //on initialise la variable message à null
    var message = null;
    // query : SELECT * FROM `products` WHERE `deleted`=0 
     sqlhelper.pool.query("SELECT * FROM `products` WHERE `deleted`=0", function (err, rows, fields) {
        //function qui renvoie une erreur si il y a un probleme
        // on verifie dans la console le valeur de err pour voir si il y a une erreur
        //console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        if (err != null) {
            //on enregistre le message d'erreur'
            //message = "Il y a eu une erreur dans la query";
            //on log pour voir le mesage si il passe
            //console.log(message + ' ----- ' + err);
        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            //message = "La recuperation des données c'est bien passé ";
            //on log pour voir le mesage si il passe
            //console.log('message bien reussi avec le message : ' + message);
            //console.log('Tous les produits: '+JSON.stringify(rows));
        
            //si le user enregistré en session est different de nul (loggé)
                if (typeof req.user !== 'undefined') {
                    //alors je renvoie le twig avec un tablo qui recupere les elements de username
                    resp.render("admin/produits.html.twig", { "username": req.user.username, "produits": rows});
                }
                //sinon je renvoie le user a la page login pour authentification
                else {
                    resp.redirect("/login.html");
                }
            }  
    });
});
/////////////////////////////////////////////////////////////////////////////////
//////////////////Route admin avec tous les clients////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

///////////////////////route "/touslesclients.html" ////////////////////////////////////////////////

router.get("/touslesclients.html", function (req, resp) {
    //on initialise la variable message à null
    var message = null;
     sqlhelper.pool.query("SELECT * FROM `customers` WHERE `deleted`=0", function (err, rows, fields) {
        //function qui renvoie une erreur si il y a un probleme
        // on verifie dans la console le valeur de err pour voir si il y a une erreur
        //console.log("err :" + err);
        //si il y a une erreur donc si la valeur err est differente de null
        if (err != null) {
            //on enregistre le message d'erreur'
           // message = "Il y a eu une erreur dans la query";
            //on log pour voir le mesage si il passe
            //console.log(message + ' ----- ' + err);
        }
        else {
            //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
            //message = "La recuperation des données c'est bien passé ";
            //on log pour voir le mesage si il passe
            //console.log('message bien reussi avec le message : ' + message);
            //console.log('Tous les produits: '+JSON.stringify(rows));
            //si le user enregistré en session est different de nul ()
                if (typeof req.user !== 'undefined') {
                    //alors je renvoie le twig avec un tablo qui recupere les elements de username
                    resp.render("admin/touslesclients.html.twig", { "username": req.user.username, "clients": rows});
                }
                //sinon je renvoie le user a la page login pour authentification
                else {
                    resp.redirect("/login.html");
                }
            }  
    });
});
/////////////////////////////////////////////////////////////////////////////////
//////////////////Route pour voir les infos du client////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

///////////////////////route "/modifclient/id" avec affichage pour modification ulterieur d'un produit ////////////////////////////////////////////////

router.get("/modifclient/:id", function (req, resp) {
    //on initialise la variable message à null
    var message = null;
    var id = req.params.id;
    //Alors on passe second query pour la modification d'un produit recuperer par son id
        sqlhelper.pool.query("SELECT * FROM `customers` WHERE `id`="+id+"", function (err, rows, fields) {
            //function qui renvoie une erreur si il y a un probleme
            // on verifie dans la console le valeur de err pour voir si il y a une erreur
            //console.log("err :" + err);
            //si il y a une erreur donc si la valeur err est differente de null
            if (err != null) {
                //on enregistre le message d'erreur'
                //message = "Il y a eu une erreur dans la query";
                //on log pour voir le mesage si il passe
                //console.log(message + ' ----- ' + err);
            }
            else {
                //sinon il n'y a pas d'erreur donc on ajoute la nouvelle valeur au message
                //message = "La recuperation des données c'est bien passé ";
                //on log pour voir le mesage si il passe
                //console.log('message bien reussi avec le message : ' + message);
                //si le user enregistré en session est different de nul (typeof verifi le type de donné)
            if (typeof req.user !== 'undefined') {
                //console.log("Un produit 22:" + JSON.stringify(produit));
                //alors je renvoie le twig avec un tablo qui recupere les elements de username
                resp.render("admin/client_modif.html.twig", { "username": req.user.username, "client": rows });
            }
            //sinon je renvoie le user a la page login pour authentification
            else {
                resp.redirect("/login.html");
            }         
        }
    });   
});

//exportation du module fin de admin 
module.exports = router;
